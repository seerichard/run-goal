{"version":3,"sources":["constants.ts","components/Form.tsx","url.ts","api.ts","components/TokenFetcher.tsx","components/MainScreen.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["CLIENT_ID","CLIENT_SECRET","ACCESS_TOKEN","REFRESH_TOKEN","Form","useForm","register","errors","handleSubmit","onSubmit","clientId","clientSecret","localStorage","setItem","redirectUrl","window","location","href","name","ref","required","type","getTokensUrl","code","refreshTokenUrl","refreshToken","getActivitiesUrl","accessToken","BEFORE","Date","now","getTokens","a","getItem","fetch","method","response","json","data","access_token","refresh_token","athlete","firstname","lastname","url","split","getRuns","RUN","runData","filter","TokenFetcher","useEffect","catch","error","console","log","MainScreen","useState","setRunData","then","res","totalDistance","reduce","acc","curr","distance","totalDistanceKm","Math","round","Number","EPSILON","App","URLSearchParams","search","get","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4724894.chunk.js","sourcesContent":["export const CLIENT_ID = 'cid';\nexport const CLIENT_SECRET = 'cs';\nexport const ACCESS_TOKEN = 'at';\nexport const REFRESH_TOKEN = 'rt';\nexport const FIRST_NAME = 'fn';\nexport const LAST_NAME = 'ln';\n","import { FC } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { CLIENT_ID, CLIENT_SECRET } from '../constants';\n\ntype FormValues = {\n  clientId: string;\n  clientSecret: string;\n};\n\nconst Form: FC = () => {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  const { register, errors, handleSubmit } = useForm<FormValues>();\n\n  const onSubmit = ({ clientId, clientSecret }: FormValues) => {\n    localStorage.setItem(CLIENT_ID, clientId);\n    localStorage.setItem(CLIENT_SECRET, clientSecret);\n\n    const redirectUrl = window.location.href;\n\n    window.location.href = `https://www.strava.com/oauth/authorize?client_id=${clientId}&redirect_uri=${redirectUrl}&response_type=code&scope=activity:read_all`;\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <label>Client Id</label>\n      <input name=\"clientId\" ref={register({ required: true })} />\n      {errors.clientId && 'Please enter a Client Id'}\n\n      <label>Client Secret</label>\n      <input name=\"clientSecret\" ref={register({ required: true })} />\n      {errors.clientSecret && 'Please enter a Client Secret'}\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n};\n\nexport default Form;\n","type GetTokensProps = {\n  clientId: string;\n  clientSecret: string;\n  code: string;\n};\n\n/**\n * Gets the initial refresh and access tokens when app is first authorised\n */\nexport const getTokensUrl = ({\n  clientId,\n  clientSecret,\n  code,\n}: GetTokensProps): string =>\n  `https://www.strava.com/oauth/token?client_id=${clientId}&client_secret=${clientSecret}&code=${code}&grant_type=authorization_code`;\n\ntype RefreshTokenProps = {\n  clientId: string;\n  clientSecret: string;\n  refreshToken: string;\n};\n\n/**\n * Refreshes the access token.\n * Best to call before fetching activities to ensure the access token has not expired\n */\nexport const refreshTokenUrl = ({\n  clientId,\n  clientSecret,\n  refreshToken,\n}: RefreshTokenProps): string =>\n  `https://www.strava.com/oauth/token?client_id=${clientId}&client_secret=${clientSecret}&refresh_token=${refreshToken}&grant_type=refresh_token`;\n\ntype GetActivitiesProps = {\n  accessToken: string;\n};\n\n/**\n * Gets all activities logged in Strava for the year 2021.\n * This includes all non running activities.\n * Page limit set to 200 as that seems to be the maximum\n */\nexport const getActivitiesUrl = ({\n  accessToken,\n}: GetActivitiesProps): string => {\n  // Current time - convert to seconds. Strava does not seem to accept milliseconds\n  const BEFORE = Date.now() / 1000;\n\n  //  January 1, 2021 12:00:00 AM\n  const AFTER = 1609459200;\n\n  // Setting to 200 activities per call. Seems to be the max amount\n  // Look into pagination when I've done over 200 activities in a year\n  return `https://www.strava.com/api/v3/athlete/activities?access_token=${accessToken}&before=${BEFORE}&after=${AFTER}&per_page=200`;\n};\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { getTokensUrl, refreshTokenUrl, getActivitiesUrl } from './url';\nimport {\n  CLIENT_ID,\n  CLIENT_SECRET,\n  ACCESS_TOKEN,\n  REFRESH_TOKEN,\n  FIRST_NAME,\n  LAST_NAME,\n} from './constants';\n\ntype Token = (code: string) => Promise<void>;\n\n/**\n * Fetch initial user access token, refresh token, first name and last name\n * then store in local storage.\n * Once completed, clear url and push user to home\n */\nexport const getTokens: Token = async (code: string) => {\n  const clientId = localStorage.getItem(CLIENT_ID)!;\n  const clientSecret = localStorage.getItem(CLIENT_SECRET)!;\n\n  const response = await fetch(getTokensUrl({ clientId, clientSecret, code }), {\n    method: 'POST',\n  });\n\n  const data = await response.json();\n  const {\n    access_token,\n    refresh_token,\n    athlete: { firstname, lastname },\n  } = data;\n\n  localStorage.setItem(ACCESS_TOKEN, access_token);\n  localStorage.setItem(REFRESH_TOKEN, refresh_token);\n  localStorage.setItem(FIRST_NAME, firstname);\n  localStorage.setItem(LAST_NAME, lastname);\n\n  const url = window.location.href;\n\n  window.location.href = url.split('?')[0];\n};\n\ntype VoidReturn = () => Promise<void>;\n\n/**\n * Refresh the access token and store in local storage\n */\nexport const refreshToken: VoidReturn = async () => {\n  const clientId = localStorage.getItem(CLIENT_ID)!;\n  const clientSecret = localStorage.getItem(CLIENT_SECRET)!;\n  const refreshToken = localStorage.getItem(REFRESH_TOKEN)!;\n\n  const response = await fetch(\n    refreshTokenUrl({\n      clientId,\n      clientSecret,\n      refreshToken,\n    }),\n    {\n      method: 'POST',\n    },\n  );\n\n  const data = await response.json();\n  const { access_token } = data;\n\n  localStorage.setItem(ACCESS_TOKEN, access_token);\n};\n\n// Fix this any\ntype Runs = () => Promise<any>;\n\n/**\n * Return an array of Run activities\n */\nexport const getRuns: Runs = async () => {\n  const accessToken = localStorage.getItem(ACCESS_TOKEN)!;\n  const RUN = 'Run';\n\n  const response = await fetch(getActivitiesUrl({ accessToken }));\n\n  const data = await response.json();\n\n  // Filter out all non run activities\n  const runData = data.filter(({ type }: { type: string }) => type === RUN);\n\n  return runData;\n};\n","import { FC, useEffect } from 'react';\nimport { getTokens } from '../api';\n\ntype Props = {\n  code: string;\n};\n\nconst TokenFetcher: FC<Props> = ({ code }) => {\n  useEffect(() => {\n    getTokens(code).catch((error) =>\n      console.log('Something happened fetching the token :(', error),\n    );\n  }, []);\n\n  return <div>Token Fetcher Component</div>;\n};\n\nexport default TokenFetcher;\n","import { FC, useState, useEffect } from 'react';\nimport { refreshToken, getRuns } from '../api';\n\nconst MainScreen: FC = () => {\n  const [runData, setRunData] = useState<any[]>([]);\n\n  useEffect(() => {\n    refreshToken().catch((error) =>\n      console.log('Something happened refreshing the token :(', error),\n    );\n\n    getRuns()\n      .then((res) => setRunData(res))\n      .catch((error) =>\n        console.log('Something happened getting activities :(', error),\n      );\n  }, []);\n\n  console.log('runData:', runData);\n\n  const totalDistance: number =\n    runData.reduce(\n      // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n      (acc, curr) => acc + curr.distance,\n      0,\n    ) / 10;\n\n  const totalDistanceKm =\n    Math.round(totalDistance + Number.EPSILON * 100) / 100;\n\n  return <div>Total Distance Run This Year: {totalDistanceKm}km</div>;\n};\n\nexport default MainScreen;\n","import { FC } from 'react';\nimport Form from './Form';\nimport TokenFetcher from './TokenFetcher';\nimport MainScreen from './MainScreen';\nimport { REFRESH_TOKEN } from '../constants';\n\nconst getCodeParam = () => {\n  const urlParams = new URLSearchParams(window.location.search);\n  const codeParam = urlParams.get('code');\n\n  return codeParam;\n};\n\nconst App: FC = () => {\n  const code = getCodeParam();\n  const refreshToken = localStorage.getItem(REFRESH_TOKEN);\n\n  return refreshToken ? (\n    <MainScreen />\n  ) : code ? (\n    <TokenFetcher code={code} />\n  ) : (\n    <Form />\n  );\n};\n\nexport default App;\n","/* eslint-disable promise/always-return */\n/* eslint-disable promise/catch-or-return */\n/* eslint-disable @typescript-eslint/no-floating-promises */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}